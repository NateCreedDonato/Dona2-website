/******************************************************************** functions */

@mixin centerBlock() {
  margin-left: auto;
  margin-right: auto;
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}




@mixin font( $size: false, $colour: false, $weight: false,  $lh: false,  $primary_font_stack: $primary_font_stack) {
    font-family: $primary_font_stack;
    @if $colour { color: $colour; }
    @if $colour { color: $colour; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
    @if $size { @include font-size($size) }
}


@mixin font-size($size, $base: $default_size) {
  font-size: $size*1px; // fallback for old browsers
  font-size: ($size / 16) * 1rem;
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}



/*
    @include mq('tablet-wide') {
        padding-top: 4rem;
        font-size: 2.4rem;
    }
 */
$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       782px,
    "tablet-medium":850px,
    "tablet-semiwide":  991px,
    "tablet-wide":  1024px,
    "desktop":      1200px,
    "desktop-wide": 1440px
);
@mixin mq($width, $type: max) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y) translate3d(0, 0, 0);
     -moz-transform: translate($x, $y) translate3d(0, 0, 0);
      -ms-transform: translate($x, $y) translate3d(0, 0, 0);
       -o-transform: translate($x, $y) translate3d(0, 0, 0);
          transform: translate($x, $y) translate3d(0, 0, 0);
}


@mixin scale($x) {
  -webkit-transform: scale($x);
     -moz-transform: scale($x);
      -ms-transform: scale($x);
       -o-transform: scale($x);
          transform: scale($x);
}

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin rotate($deg){
  transform: rotate($deg);
  -webkit-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -o-transform: rotate($deg);
  -ms-transform: rotate($deg);
}

@mixin center($position) {
  position: absolute;
  
  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
  @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  }
  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
  @else if $position == 'none' {
    position: relative;
    top: auto;
    left: auto;
    -webkit-transform: translate(0,0);
    -ms-transform: translate(0,0);
    transform: translate(0,0);
  }
}


@mixin clearFix(){
  &:before,
  &:after{
    content: " "; 
    display: table; 
  }
  &:after{
    display: block;
    clear: both;
    height: 1px;
    margin-top: -1px;
    visibility: hidden;
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  @if($opacity == 0){
    visibility: hidden;
  }
  @if($opacity != 0){
    visibility: visible;
  }
  filter: alpha(opacity = $opacity-ie); //IE8
}

@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin rounded($radius: 0.5em) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

/********************************************************************** animations */

@mixin transition($transition: false) {

  @if $transition {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
  } @else {
    -webkit-transition: all 0.3s ease-in-out;
    -moz-transition: all 0.3s ease-in-out;
    -ms-transition: all 0.3s ease-in-out;
    -o-transition: all 0.3s ease-in-out;
    transition: all 0.3s ease-in-out;
  }
}

@mixin keyframes( $animationName )
{
    @-webkit-keyframes $animationName {
        @content;
    }
    @-moz-keyframes $animationName {
        @content;
    }
    @-o-keyframes $animationName {
        @content;
    }
    @keyframes $animationName {
        @content;
    }
}

// Mixins
@mixin gradient($top_color, $bottom_color) {
  background-image: -webkit-linear-gradient(top, $top_color 0%, $bottom_color 100%);
  background-image: linear-gradient(to bottom, $top_color 0%, $bottom_color 100%);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($top_color)}', endColorstr='#{ie-hex-str($bottom_color)}', GradientType=0); // IE9 and down
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

@mixin hardware($backface: true, $perspective: 1000) {
    @if $backface {
        backface-visibility: hidden;
    }
    perspective: $perspective;
}

/*
@include grid-generator(xs, 12);

@include respond-from(vs) {
  @include grid-generator(vs, 12);
}

@include respond-from(sm) {
  @include grid-generator(sm, 12);
}

@include respond-from(md) {
  @include grid-generator(md, 12);
}

@include respond-from(lg) {
  @include grid-generator(lg, 12);
}

@include respond-from(xl) {
  @include grid-generator(xl, 12);
}
*/
@mixin grid-generator($size, $grid-columns) {
  @for $i from 1 through $grid-columns {
    .col-#{$size}-#{$i}-#{$grid-columns} {
      width: percentage($i / $grid-columns);
      max-width: percentage($i / $grid-columns);
      float: left;
      min-height:1px;
      padding:0px 13px;
    }
  }
}

@mixin respond-from($media) {
  @if $media == xs {
    @media (min-width: 0px)  { @content; }
  } @else if $media == vs {
    @media (min-width: 640px) { @content; }
  } @else if $media == sm {
    @media (min-width: 768px) { @content; }
  } @else if $media == md {
    @media (min-width: 991px) { @content; }
  } @else if $media == lg {
    @media (min-width: 1200px) { @content; }
  } @else if $media == xl {
    @media (min-width: 1400px) { @content; }
  }
}

/**
 * Columns
 *
 */
@mixin columns( $columns, $wrapper_width: null, $grid_item_element: article ) {

  @if( $wrapper_width == null ) {
    $wrapper_width: $grid-max-width;
  }

  #{$grid_item_element} {
    float: left;
    margin-left: $grid-gutter / $wrapper_width * 100%;
    width: ( ( $wrapper_width - $grid-gutter * ( $columns - 1 ) ) / $columns ) / $wrapper_width * 100%;

    &:nth-of-type(#{$columns}n+1) {
      clear: both;
      margin-left: 0;
    }
  }

  @supports( grid-area: auto ) {
    display: grid;
    grid-column-gap: $grid-gutter;
    grid-template-columns: repeat( $columns, 1fr );

    #{$grid_item_element} {
      margin-left: 0;
      width: 100%;
    }

    header, nav, aside, footer {
      grid-column: 1 / -1;
    }
  }
}

/**
 * Columns, Mobile
 *@include columns-mobile( 2, 400px, li );
@include columns-tablet( 3, 700px, li );
@include columns-desktop( 4, 1000px, li );
 */
@mixin columns-mobile( $columns, $wrapper_width: null, $grid_item_element: article ) {

  @include media("<tablet") {
    @include columns( $columns, $wrapper_width, $grid_item_element );
  }
}

/**
 * Columns, Tablet
 *
 */
@mixin columns-tablet( $columns, $wrapper_width: null, $grid_item_element: article ) {

  @include media(">=tablet", "<medium") {
    @include columns( $columns, $wrapper_width, $grid_item_element );
  }

}

/**
 * Columns, Tablet Up
 *
 */
@mixin columns-tablet-up( $columns, $wrapper_width: null, $grid_item_element: article ) {

  @include media(">=tablet") {
    @include columns( $columns, $wrapper_width, $grid_item_element );
  }

}

/**
 * Columns, Desktop
 *
 */
@mixin columns-desktop( $columns, $wrapper_width: null, $grid_item_element: article ) {
  @include media(">=medium") {
    @include columns( $columns, $wrapper_width, $grid_item_element );
  }
}